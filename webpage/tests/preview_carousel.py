import streamlit as st
import time


def image_carousel():
    """Test component for image carousel"""
    images = []
    n = 10
    img_str = "/9j/4AAQSkZJRgABAQAAAQABAAD/4QBqRXhpZgAASUkqAAgAAAADABIBAwABAAAAAQAAADEBAgARAAAAMgAAAGmHBAABAAAARAAAAAAAAABTaG90d2VsbCAwLjMwLjEwAAACAAKgCQABAAAAkAEAAAOgCQABAAAAkAEAAAAAAAD/4Qn0aHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLwA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/PiA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJYTVAgQ29yZSA0LjQuMC1FeGl2MiI+IDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+IDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOmV4aWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vZXhpZi8xLjAvIiB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyIgZXhpZjpQaXhlbFhEaW1lbnNpb249IjQwMCIgZXhpZjpQaXhlbFlEaW1lbnNpb249IjQwMCIgdGlmZjpJbWFnZVdpZHRoPSI0MDAiIHRpZmY6SW1hZ2VIZWlnaHQ9IjQwMCIgdGlmZjpPcmllbnRhdGlvbj0iMSIvPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/eHBhY2tldCBlbmQ9InciPz7/2wBDAAMCAgMCAgMDAwMEAwMEBQgF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"
    for i in range(n):
        images.append(f"data:image/png;base64,{img_str}")

    carousel_html = f"""
    <style>
    @keyframes slide {{
        0% {{ transform: translateX(0); }}
        100% {{ transform: translateX(-50%); }}
    }}

    .carousel-container {{
        overflow: hidden;
        position: relative;
        width: 100%;
        margin: 2rem 0;
        background: #f0f2f6;
        padding: 10px 0;
        border-radius: 15px;
    }}

    .carousel-track {{
        display: flex;
        animation: slide 10s linear infinite;
    }}

    .carousel-item {{
        flex: 0 0 auto;
        width: 100px;
        height: 100px;
        margin: 0 10px;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        transition: transform 0.3s ease;
    }}

    .carousel-item:hover {{
        transform: scale(1.05);
        cursor: pointer;
    }}
    </style>

    <div class="carousel-container">
        <div class="carousel-track">
            {' '.join([f'<img src="{img}" class="carousel-item">' for img in images * 2])}
        </div>
    </div>
    """
    st.markdown(carousel_html, unsafe_allow_html=True)


def main():
    st.write("Testing the eternal flow of images...")
    image_carousel()


if __name__ == "__main__":
    main()
